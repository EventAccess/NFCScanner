#include <SPI.h>
#include <Ethernet.h>
#include <Dhcp.h>

#include <ArduinoHttpClient.h>
#include <URLParser.h>

#include <ArduinoJson.h>


// assign a MAC address for the Ethernet controller.
// fill in your address here:
// TODO: Automatic MAC address configuration
byte mac[] = {
  0x98, 0x76, 0xB6, 0x12, 0xE9, 0x97
};
// Set the static IP address to use if the DHCP fails to assign
IPAddress ip(192, 168, 42, 177);
IPAddress myDns(192, 168, 42, 1);

// initialize the library instance:
EthernetClient ethernet;

auto url = ParsedUrl("http://10.79.1.0:8080/api/nfctag");

HttpClient http = HttpClient(ethernet, url.host(), url.port());

IPAddress my_ip;

void setup() {
  // You can use Ethernet.init(pin) to configure the CS pin
  Ethernet.init(D10); // D10 challenger NFC marking == GPIO5, matches with FeatherWing Ethernet

  // start serial port:
  Serial.begin(115200);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  // start the Ethernet connection:
  Serial.println("Initialize Ethernet with DHCP:");
  if (Ethernet.begin(mac) == 0) {
    Serial.println("Failed to configure Ethernet using DHCP");
    // Check for Ethernet hardware present
    if (Ethernet.hardwareStatus() == EthernetNoHardware) {
      Serial.println("Ethernet shield was not found.  Sorry, can't run without hardware. :(");
      while (true) {
        delay(1); // do nothing, no point running without Ethernet hardware
      }
    }
    if (Ethernet.linkStatus() == LinkOFF) {
      Serial.println("Ethernet cable is not connected.");
    }
    // try to configure using IP address instead of DHCP:
    Ethernet.begin(mac, ip, myDns);
    Serial.print("My IP address: ");
    Serial.println(Ethernet.localIP());
  } else {
    Serial.print("  DHCP assigned IP ");
    my_ip = Ethernet.localIP();
    Serial.println(my_ip);
  }
  // give the Ethernet shield a second to initialize:
  delay(1000);
  Serial.println();

  http.setHttpWaitForDataDelay(10);
  setTimeout(200);
}

enum TagValidity {
  ERROR=-1,
  INVALID=0,
  VALID=1,
};

// Needed because TagValidity does not exist when Arduino's autogenerated prototypes are added
TagValidity checkTag(const char* tag_id);

TagValidity checkTag(const char* tag_id) {
  /* Attempting to perform a HTTP request while link is disconnected causes a 60s delay
  */
  if (Ethernet.linkStatus() == EthernetLinkStatus::LinkOFF) {
    Serial.println("Error: Ethernet cable not connected");
    return TagValidity::ERROR;
  }

  String nfc_url = url.path();
  nfc_url += "/";
  nfc_url += tag_id;
  Serial.println(http.httpResponseTimeout());
  Serial.println(http.httpWaitForDataDelay());
  Serial.println(http.getTimeout());

  http.beginRequest();
  http.post(nfc_url);
  http.endRequest();

  // read the status code and body of the response
  int statusCode = http.responseStatusCode();
  String response = http.responseBody();

  Serial.print("Status code: ");
  Serial.println(statusCode);
  Serial.print("Response: ");
  Serial.println(response);

  JsonDocument doc;
  DeserializationError err = deserializeJson(doc, response);

  if (err) {
    Serial.print(F("Deserializing JSON failed: "));
    Serial.println(err.c_str());
  }

  if (doc["error"].is<const char*>()) {
    Serial.print("API returned error message: ");
    Serial.println(doc["error"].as<const char*>());
  }

  if (doc["valid"].is<bool>()) {
    if (doc["valid"].as<bool>()) {
      Serial.println("Valid tag!");
      return TagValidity::VALID;
    } else {
      Serial.println("Invalid tag!!!");
      return TagValidity::INVALID;
    }
  } else {
    Serial.println("Key valid either isn't bool or does not exist.");
  }

  Serial.println("Error occured!");

  return TagValidity::ERROR;
}


void ethernet_maintain() {
  IPAddress current_ip;
  switch (Ethernet.maintain())
  {
  case DHCP_CHECK_REBIND_OK:
  case DHCP_CHECK_RENEW_OK:
    Serial.println("DHCP refreshed OK");
    current_ip = Ethernet.localIP();
    if (current_ip != my_ip) {
      Serial.print("IP changed to: ");
      Serial.println(current_ip);
      my_ip = current_ip;
    }
    break;
  case DHCP_CHECK_REBIND_FAIL:
    Serial.println("DHCP Rebind failed");
    break;
  case DHCP_CHECK_RENEW_FAIL:
    Serial.println("DHCP Renew failed");
    break;

  case DHCP_CHECK_NONE:
  default:
    break;
  }
}

void setTimeout(uint16_t timeout) {
  ethernet.setTimeout(timeout);
  ethernet.setConnectionTimeout(timeout);
  http.setTimeout(timeout);

  http.setHttpResponseTimeout(2*timeout);
}

void loop() {
  ethernet_maintain();

  EthernetLinkStatus link_status = Ethernet.linkStatus();
  Serial.print("Link status: ");
  Serial.println(link_status);

  uint8_t socket_status = ethernet.status();
  Serial.print("Socket status: ");
  Serial.println(socket_status);

  Serial.print("Socket number: ");
  Serial.println(ethernet.getSocketNumber());

  Serial.print("Local port: ");
  Serial.println(ethernet.localPort());
  Serial.print("Remote: ");
  Serial.print(ethernet.remoteIP());
  Serial.print(":");
  Serial.println(ethernet.remotePort());

  //Serial.print("HTTP Remote: ");
  //Serial.print(http.iServerAddress);

  // TODO: Reconnect on connection failure
  //       Both the Ethernet link, and the TCP socket
  Serial.println("making POST request");

  checkTag("deadbeef");

  Serial.println("Wait five seconds\n-----");
  Serial.flush();
  delay(5000);
}
