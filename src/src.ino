#include <SPI.h>
#include <Ethernet.h>
#include <Dhcp.h>

#include <ArduinoHttpClient.h>
#include <URLParser.h>

#include <ArduinoJson.h>

#include <Electroniccats_PN7150.h>
#undef ERROR
#include <Wire.h>


#define PN7150_WIRE (Wire1)
#define PN7150_IRQ (uint8_t)(9)
#define PN7150_VEN (uint8_t)(12)
#define PN7150_ADDR (uint8_t)(0x28)

Electroniccats_PN7150 nfc(PN7150_IRQ, PN7150_VEN, PN7150_ADDR, &PN7150_WIRE);
String getHexRepresentation(const byte* data, const uint32_t numBytes);
void displayCardInfo();

// assign a MAC address for the Ethernet controller.
// fill in your address here:
// TODO: Automatic MAC address configuration
byte mac[] = {
  0x98, 0x76, 0xB6, 0x12, 0xE9, 0x97
};
// Set the static IP address to use if the DHCP fails to assign
IPAddress ip(192, 168, 42, 177);
IPAddress myDns(192, 168, 42, 1);

// initialize the library instance:
EthernetClient ethernet;

auto url = ParsedUrl("http://10.79.1.0:40001/api/nfctag");

HttpClient http = HttpClient(ethernet, url.host(), url.port());

IPAddress my_ip;

void setup() {
  // You can use Ethernet.init(pin) to configure the CS pin
  Ethernet.init(D10); // D10 challenger NFC marking == GPIO5, matches with FeatherWing Ethernet

  // start serial port:
  Serial.begin(115200);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  // start the Ethernet connection:
  Serial.println("Initialize Ethernet with DHCP:");
  if (Ethernet.begin(mac) == 0) {
    Serial.println("Failed to configure Ethernet using DHCP");
    // Check for Ethernet hardware present
    if (Ethernet.hardwareStatus() == EthernetNoHardware) {
      Serial.println("Ethernet shield was not found.  Sorry, can't run without hardware. :(");
      while (true) {
        delay(1); // do nothing, no point running without Ethernet hardware
      }
    }
    if (Ethernet.linkStatus() == LinkOFF) {
      Serial.println("Ethernet cable is not connected.");
    }
    // try to configure using IP address instead of DHCP:
    Ethernet.begin(mac, ip, myDns);
    Serial.print("My IP address: ");
    Serial.println(Ethernet.localIP());
  } else {
    Serial.print("  DHCP assigned IP ");
    my_ip = Ethernet.localIP();
    Serial.println(my_ip);
  }
  // give the Ethernet shield a second to initialize:
  delay(1000);
  Serial.println();

  http.setHttpWaitForDataDelay(10);
  setTimeout(200);

  Serial.println("Detect NFC tags with PN7150");

  Serial.println("Initializing...");
  pinMode(PN7150_IRQ, INPUT);

  if (nfc.connectNCI()) {  // Wake up the board
    Serial.println("Error while setting up the mode, check connections!");
    while (1)
      ;
  }

  if (nfc.configureSettings()) {
    Serial.println("The Configure Settings is failed!");
    while (1)
      ;
  }

  // Read/Write mode as default
  if (nfc.configMode()) {  // Set up the configuration mode
    Serial.println("The Configure Mode is failed!!");
    while (1)
      ;
  }
  nfc.startDiscovery();  // NCI Discovery mode
  Serial.println("Waiting for an Card ...");
}

enum TagValidity {
  ERROR=100,
  INVALID=0,
  VALID=1,
};

// Needed because TagValidity does not exist when Arduino's autogenerated prototypes are added
TagValidity checkTag(const char* tag_id);

TagValidity checkTag(const char* tag_id) {
  /* Attempting to perform a HTTP request while link is disconnected causes a 60s delay
  */
  if (Ethernet.linkStatus() == EthernetLinkStatus::LinkOFF) {
    Serial.println("Error: Ethernet cable not connected");
    return TagValidity::ERROR;
  }

  String nfc_url = url.path();
  nfc_url += "/";
  nfc_url += tag_id;
  Serial.println(http.httpResponseTimeout());
  Serial.println(http.httpWaitForDataDelay());
  Serial.println(http.getTimeout());

  http.beginRequest();
  http.post(nfc_url);
  http.endRequest();

  // read the status code and body of the response
  int statusCode = http.responseStatusCode();
  String response = http.responseBody();

  Serial.print("Status code: ");
  Serial.println(statusCode);
  Serial.print("Response: ");
  Serial.println(response);

  JsonDocument doc;
  DeserializationError err = deserializeJson(doc, response);

  if (err) {
    Serial.print(F("Deserializing JSON failed: "));
    Serial.println(err.c_str());
  }

  if (doc["error"].is<const char*>()) {
    Serial.print("API returned error message: ");
    Serial.println(doc["error"].as<const char*>());
  }

  if (doc["valid"].is<bool>()) {
    if (doc["valid"].as<bool>()) {
      Serial.println("Valid tag!");
      return TagValidity::VALID;
    } else {
      Serial.println("Invalid tag!!!");
      return TagValidity::INVALID;
    }
  } else {
    Serial.println("Key valid either isn't bool or does not exist.");
  }

  Serial.println("Error occured!");

  return TagValidity::ERROR;
}


void ethernet_maintain() {
  IPAddress current_ip;
  switch (Ethernet.maintain())
  {
  case DHCP_CHECK_REBIND_OK:
  case DHCP_CHECK_RENEW_OK:
    Serial.println("DHCP refreshed OK");
    current_ip = Ethernet.localIP();
    if (current_ip != my_ip) {
      Serial.print("IP changed to: ");
      Serial.println(current_ip);
      my_ip = current_ip;
    }
    break;
  case DHCP_CHECK_REBIND_FAIL:
    Serial.println("DHCP Rebind failed");
    break;
  case DHCP_CHECK_RENEW_FAIL:
    Serial.println("DHCP Renew failed");
    break;

  case DHCP_CHECK_NONE:
  default:
    break;
  }
}

void setTimeout(uint16_t timeout) {
  ethernet.setTimeout(timeout);
  ethernet.setConnectionTimeout(timeout);
  http.setTimeout(timeout);

  http.setHttpResponseTimeout(2*timeout);
}

void loop() {
  ethernet_maintain();

  EthernetLinkStatus link_status = Ethernet.linkStatus();
  Serial.print("Link status: ");
  Serial.println(link_status);

  uint8_t socket_status = ethernet.status();
  Serial.print("Socket status: ");
  Serial.println(socket_status);

  Serial.print("Socket number: ");
  Serial.println(ethernet.getSocketNumber());

  Serial.print("Local port: ");
  Serial.println(ethernet.localPort());
  Serial.print("Remote: ");
  Serial.print(ethernet.remoteIP());
  Serial.print(":");
  Serial.println(ethernet.remotePort());

  //Serial.print("HTTP Remote: ");
  //Serial.print(http.iServerAddress);

  // TODO: Reconnect on connection failure
  //       Both the Ethernet link, and the TCP socket
  //Serial.println("making POST request");

  //checkTag("deadbeef");

  //Serial.println("-----");
  //Serial.flush();


  if (nfc.isTagDetected(5000)) {
    displayCardInfo();

    // It can detect multiple cards at the same time if they use the same protocol
    if (nfc.remoteDevice.hasMoreTags()) {
      nfc.activateNextTagDiscovery();
      Serial.println("Multiple cards are detected!");
    }

    Serial.println("Remove the Card");
    nfc.waitForTagRemoval();
    Serial.println("Card removed!");
  }

  //Serial.println("Restarting...");
  nfc.reset();
  //Serial.println("Waiting for a Card...");
  //delay(500);
}


String getHexRepresentation(const byte* data, const uint32_t numBytes) {
  String hexString;

  if (numBytes == 0) {
    hexString = "null";
  }

  for (uint32_t szPos = 0; szPos < numBytes; szPos++) {
    hexString += "0x";
    if (data[szPos] <= 0xF)
      hexString += "0";
    hexString += String(data[szPos] & 0xFF, HEX);
    if ((numBytes > 1) && (szPos != numBytes - 1)) {
      hexString += " ";
    }
  }
  return hexString;
}

const char* HEX_CHARSET = "0123456789abcdef";
String toHex(const byte* data, const size_t len) {
  char res[(len*2)+1] = "";
  for (size_t i=0; i<len; i++) {
    res[i*2] = HEX_CHARSET[(data[i] & 0xf0) >> 4];
    res[(i*2)+1] = HEX_CHARSET[data[i] & 0x0f];;
  }
  res[len*2] = 0; // Null terminated
  return String(res);
}

void displayCardInfo() {  // Funtion in charge to show the card/s in te field
  char tmp[16];

  while (true) {
    switch (nfc.remoteDevice.getProtocol()) {  // Indetify card protocol
      case nfc.protocol.T1T:
      case nfc.protocol.T2T:
      case nfc.protocol.T3T:
      case nfc.protocol.ISODEP:
        Serial.print(" - POLL MODE: Remote activated tag type: ");
        Serial.println(nfc.remoteDevice.getProtocol());
        break;
      case nfc.protocol.ISO15693:
        Serial.println(" - POLL MODE: Remote ISO15693 card activated");
        break;
      case nfc.protocol.MIFARE:
        Serial.println(" - POLL MODE: Remote MIFARE card activated");
        break;
      default:
        Serial.println(" - POLL MODE: Undetermined target");
        return;
    }

    String nfc_id = "";
    TagValidity is_ok;

    switch (nfc.remoteDevice.getModeTech()) {  // Indetify card technology
      case (nfc.tech.PASSIVE_NFCA):
        Serial.println("\tTechnology: NFC-A");
        Serial.print("\tSENS RES = ");
        Serial.println(getHexRepresentation(nfc.remoteDevice.getSensRes(), nfc.remoteDevice.getSensResLen()));

        Serial.print("\tNFC ID = ");
        Serial.println(getHexRepresentation(nfc.remoteDevice.getNFCID(), nfc.remoteDevice.getNFCIDLen()));
        nfc_id = toHex(nfc.remoteDevice.getNFCID(), nfc.remoteDevice.getNFCIDLen());
        Serial.println(nfc_id);

        Serial.print("\tSEL RES = ");
        Serial.println(getHexRepresentation(nfc.remoteDevice.getSelRes(), nfc.remoteDevice.getSelResLen()));

        is_ok = checkTag(nfc_id.c_str());

        switch (is_ok) {
          case (TagValidity::VALID):
            Serial.println("\tBackend validated tag as OK");
            break;
          case (TagValidity::INVALID):
            Serial.println("\tBackend validated tag as REJECTED");
            break;
          case (TagValidity::ERROR):
            Serial.println("\tBackend validation failed with ERROR");
            break;
        }

        break;

      case (nfc.tech.PASSIVE_NFCB):
        Serial.println("\tTechnology: NFC-B");
        Serial.print("\tSENS RES = ");
        Serial.println(getHexRepresentation(nfc.remoteDevice.getSensRes(), nfc.remoteDevice.getSensResLen()));

        Serial.println("\tAttrib RES = ");
        Serial.println(getHexRepresentation(nfc.remoteDevice.getAttribRes(), nfc.remoteDevice.getAttribResLen()));

        break;

      case (nfc.tech.PASSIVE_NFCF):
        Serial.println("\tTechnology: NFC-F");
        Serial.print("\tSENS RES = ");
        Serial.println(getHexRepresentation(nfc.remoteDevice.getSensRes(), nfc.remoteDevice.getSensResLen()));

        Serial.print("\tBitrate = ");
        Serial.println((nfc.remoteDevice.getBitRate() == 1) ? "212" : "424");

        break;

      case (nfc.tech.PASSIVE_NFCV):
        Serial.println("\tTechnology: NFC-V");
        Serial.print("\tID = ");
        Serial.println(getHexRepresentation(nfc.remoteDevice.getID(), sizeof(nfc.remoteDevice.getID())));

        Serial.print("\tAFI = ");
        Serial.println(nfc.remoteDevice.getAFI());

        Serial.print("\tDSF ID = ");
        Serial.println(nfc.remoteDevice.getDSFID(), HEX);
        break;

      default:
        break;
    }

    // It can detect multiple cards at the same time if they are the same technology
    if (nfc.remoteDevice.hasMoreTags()) {
      Serial.println("Multiple cards are detected!");
      if (!nfc.activateNextTagDiscovery()) {
        break;  // Can't activate next tag
      }
    } else {
      break;
    }
  }
}
