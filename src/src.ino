#include <SPI.h>
#include <Ethernet.h>

#include <ArduinoHttpClient.h>
#include <URLParser.h>

#include <ArduinoJson.h>


// assign a MAC address for the Ethernet controller.
// fill in your address here:
// TODO: Automatic MAC address configuration
byte mac[] = {
  0x98, 0x76, 0xB6, 0x12, 0xE9, 0x97
};
// Set the static IP address to use if the DHCP fails to assign
IPAddress ip(192, 168, 42, 177);
IPAddress myDns(192, 168, 42, 1);

// initialize the library instance:
EthernetClient ethernet;

auto url = ParsedUrl("http://10.79.1.0:8080/api/nfctag");

HttpClient client = HttpClient(ethernet, url.host(), url.port());

void setup() {
  // You can use Ethernet.init(pin) to configure the CS pin
  Ethernet.init(D10); // D10 challenger NFC marking == GPIO5, matches with FeatherWing Ethernet

  // start serial port:
  Serial.begin(115200);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  // start the Ethernet connection:
  Serial.println("Initialize Ethernet with DHCP:");
  if (Ethernet.begin(mac) == 0) {
    Serial.println("Failed to configure Ethernet using DHCP");
    // Check for Ethernet hardware present
    if (Ethernet.hardwareStatus() == EthernetNoHardware) {
      Serial.println("Ethernet shield was not found.  Sorry, can't run without hardware. :(");
      while (true) {
        delay(1); // do nothing, no point running without Ethernet hardware
      }
    }
    if (Ethernet.linkStatus() == LinkOFF) {
      Serial.println("Ethernet cable is not connected.");
    }
    // try to configure using IP address instead of DHCP:
    Ethernet.begin(mac, ip, myDns);
    Serial.print("My IP address: ");
    Serial.println(Ethernet.localIP());
  } else {
    Serial.print("  DHCP assigned IP ");
    Serial.println(Ethernet.localIP());
  }
  // give the Ethernet shield a second to initialize:
  delay(1000);
  Serial.println();
}

enum TagValidity {
  ERROR=-1,
  INVALID=0,
  VALID=1,
};

// Needed because TagValidity does not exist when Arduino's autogenerated prototypes are added
TagValidity checkTag(const char* tag_id); 

TagValidity checkTag(const char* tag_id) {

  String nfc_url = url.path();
  nfc_url += "/";
  nfc_url += tag_id;

  client.setTimeout(1000);
  
  client.post(nfc_url);
  client.endRequest();

  // read the status code and body of the response
  int statusCode = client.responseStatusCode();
  String response = client.responseBody();

  Serial.print("Status code: ");
  Serial.println(statusCode);
  Serial.print("Response: ");
  Serial.println(response);

  JsonDocument doc;
  DeserializationError err = deserializeJson(doc, response);

  if (err) {
    Serial.print(F("Deserializing JSON failed: "));
    Serial.println(err.c_str());
  }

  if (doc["error"].is<const char*>()) {
    Serial.print("API returned error message: ");
    Serial.println(doc["error"].as<const char*>());
  }

  if (doc["valid"].is<bool>()) {
    if (doc["valid"].as<bool>()) {
      Serial.println("Valid tag!");
      return TagValidity::VALID;
    } else {
      Serial.println("Invalid tag!!!");
      return TagValidity::INVALID;
    }
  } else {
    Serial.println("Key valid either isn't bool or does not exist.");
  }

  Serial.println("Error occured!");

  return TagValidity::ERROR;
}


void loop() {
  // TODO: Reconnect on connection failure
  //       Both the Ethernet link, and the TCP socket
  Serial.println("making POST request");

  checkTag("deadbeef");

  Serial.println("Wait five seconds");
  delay(5000);
}